
=================================================================================================

Este archivo es con el fin de recordar comandos utiles que debemos conocer para trabajar con git

=================================================================================================

Configurar Nombre que salen en los commits

	git config --global user.name <name>

Configurar Email

	git config --global user.email <email>

Comprobando configuracion 

	git config --list
 

Iniciamos GIT en la carpeta donde esta el proyecto
	
	git init

Clonamos el repositorio

        git clone <url>

Clonamos el repositorio en un dispositivo diferente

        export repository=<NombreDelRepositorio>
        export username=<UsuarioDueñoRepositorio>
        export git_token=<token>
        git clone https://${git_token]@github.com/${username}/${repository}.git

Creamos una rama

	git branch <nameBranch>

Creamos una rama y me posiciona en ella 

	git checkout -b <nameBranch>

Nos movemos por las diferentes ramas

	git checkout <nameBranch>

Lista todas las ramas

	git branch -all

Muestra la rama actual donde estamos posicionados

	git branch

Comando -d elimina el branch y lo une al master

	git branch -d <nameBranch>

Elimina sin preguntar

	git branch -D <nameBranch>

Conocer el estado de nuestro repositorio

	git status

Añadimos todos los archivos para el commit

	git add .

Añadimos el archivo para el commit

	git add <archivo>

Añadimos todos los archivos para el commit omitiendo los nuevos

	git add --all
 
Añadimos todos los archivos con la extensión especificada

	git add *.txt

Añadimos todos los archivos dentro de un directorio y de una extensión especifica

	git add docs/*.txt

Añadimos todos los archivos dentro de un directorios

	git add docs/

Cargar en el HEAD los cambios realizados

	git commit -m "Texto que identifique por que se hizo el commit"

Agregar y Cargar en el HEAD los cambios realizados

	git commit -a -m "Texto que identifique por que se hizo el commit"

De haber conflictos los muestra

	git commit -a 

Agregar al ultimo commit, este no se muestra como un nuevo commit en los logs. Se puede especificar un nuevo mensaje

	git commit --amend -m "Texto que identifique por que se hizo el commit"

subimos el repositorio

	git push origin -u <nameBranch>

Actualizamos el repositorio local con respecto al repositorio remoto

	git pull

Muestra los logs de los commits

	git log

Muestras los cambios en los commits

	git log --oneline --stat

Muestra graficos de los commits

	git log --oneline --graph

Deshacemos los cambios hechos

	git log --oneline //historial de confirmaciones (vemos los codigos)

	git revert <codigo> 

Saca un archivo del commit

	git reset HEAD <archivo>

Devuelve el ultimo commit que se hizo y pone los cambios en staging

	git reset --soft HEAD^

Devuelve el ultimo commit y todos los cambios

	git reset --hard HEAD^

Devuelve los 2 ultimo commit y todos los cambios

	git reset --hard HEAD^^
